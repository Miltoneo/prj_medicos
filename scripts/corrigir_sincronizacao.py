#!/usr/bin/env python3
"""
Script para limpar lan√ßamentos √≥rf√£os que ficaram ap√≥s exclus√µes em lote.
Remove lan√ßamentos que referenciam despesas que n√£o existem mais.
"""

import os
import sys
import django
from datetime import datetime

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'prj_medicos.settings')
django.setup()

from medicos.models.despesas import DespesaSocio, DespesaRateada
from medicos.models.conta_corrente import MovimentacaoContaCorrente

def limpar_lancamentos_orfaos():
    """Remove lan√ßamentos √≥rf√£os de despesas que n√£o existem mais."""
    print("üßπ LIMPANDO LAN√áAMENTOS √ìRF√ÉOS")
    print("="*50)
    
    orfaos_removidos = 0
    
    # 1. Lan√ßamentos de DespesaSocio √≥rf√£os
    print("\nüîç Verificando lan√ßamentos de Despesa S√≥cio...")
    lancamentos_socio = MovimentacaoContaCorrente.objects.filter(
        historico_complementar__contains='Despesa S√≥cio ID:'
    )
    
    for lancamento in lancamentos_socio:
        try:
            # Extrair ID da despesa do hist√≥rico
            id_str = lancamento.historico_complementar.split('Despesa S√≥cio ID: ')[1].split(')')[0]
            despesa_id = int(id_str)
            
            # Verificar se a despesa ainda existe
            if not DespesaSocio.objects.filter(id=despesa_id).exists():
                print(f"   üóëÔ∏è Removendo lan√ßamento √≥rf√£o: ID {lancamento.id} ‚Üí Despesa S√≥cio {despesa_id}")
                print(f"      Data: {lancamento.data_movimentacao}, Valor: R$ {lancamento.valor}")
                lancamento.delete()
                orfaos_removidos += 1
        except (ValueError, IndexError):
            print(f"   ‚ö†Ô∏è Lan√ßamento com formato inv√°lido: {lancamento.historico_complementar}")
    
    # 2. Lan√ßamentos de DespesaRateada √≥rf√£os
    print("\nüîç Verificando lan√ßamentos de Despesa Rateada...")
    lancamentos_rateada = MovimentacaoContaCorrente.objects.filter(
        historico_complementar__contains='Despesa Rateada ID:'
    )
    
    for lancamento in lancamentos_rateada:
        try:
            # Extrair ID da despesa do hist√≥rico
            id_str = lancamento.historico_complementar.split('Despesa Rateada ID: ')[1].split(' ')[0]
            despesa_id = int(id_str)
            
            # Verificar se a despesa ainda existe
            if not DespesaRateada.objects.filter(id=despesa_id).exists():
                print(f"   üóëÔ∏è Removendo lan√ßamento √≥rf√£o: ID {lancamento.id} ‚Üí Despesa Rateada {despesa_id}")
                print(f"      Data: {lancamento.data_movimentacao}, Valor: R$ {lancamento.valor}")
                lancamento.delete()
                orfaos_removidos += 1
        except (ValueError, IndexError):
            print(f"   ‚ö†Ô∏è Lan√ßamento com formato inv√°lido: {lancamento.historico_complementar}")
    
    print(f"\n‚úÖ Limpeza conclu√≠da!")
    print(f"üìä Total de lan√ßamentos √≥rf√£os removidos: {orfaos_removidos}")
    
    return orfaos_removidos


def recriar_lancamentos_faltantes():
    """Recria lan√ßamentos para despesas que deveriam ter mas n√£o t√™m."""
    print("\nüîß RECRIANDO LAN√áAMENTOS FALTANTES")
    print("="*50)
    
    criados = 0
    
    # 1. Verificar despesas de s√≥cio sem lan√ßamento
    print("\nüîç Verificando despesas de s√≥cio sem lan√ßamento...")
    despesas_socio = DespesaSocio.objects.all()
    
    for despesa in despesas_socio:
        lancamentos = MovimentacaoContaCorrente.objects.filter(
            historico_complementar__contains=f'Despesa S√≥cio ID: {despesa.id}'
        )
        
        if not lancamentos.exists():
            print(f"   ‚ûï Criando lan√ßamento para Despesa S√≥cio {despesa.id}")
            print(f"      {despesa.data} | {despesa.socio} | {despesa.item_despesa.descricao} | R$ {despesa.valor}")
            
            # Disparar signal manualmente para recriar o lan√ßamento
            from medicos.signals_financeiro import criar_ou_atualizar_debito_despesa_socio
            criar_ou_atualizar_debito_despesa_socio(DespesaSocio, despesa, created=False)
            criados += 1
    
    # 2. Verificar despesas rateadas sem lan√ßamento
    print("\nüîç Verificando despesas rateadas sem lan√ßamento...")
    despesas_rateadas = DespesaRateada.objects.all()
    
    for despesa in despesas_rateadas:
        lancamentos = MovimentacaoContaCorrente.objects.filter(
            historico_complementar__contains=f'Despesa Rateada ID: {despesa.id}'
        )
        
        if not lancamentos.exists():
            print(f"   ‚ûï Criando lan√ßamentos para Despesa Rateada {despesa.id}")
            print(f"      {despesa.data} | {despesa.item_despesa.descricao} | R$ {despesa.valor}")
            
            # Disparar signal manualmente para recriar os lan√ßamentos
            from medicos.signals_financeiro import criar_ou_atualizar_debitos_despesa_rateada
            criar_ou_atualizar_debitos_despesa_rateada(DespesaRateada, despesa, created=False)
            criados += 1
    
    print(f"\n‚úÖ Recria√ß√£o conclu√≠da!")
    print(f"üìä Total de lan√ßamentos criados: {criados}")
    
    return criados


def main():
    """Fun√ß√£o principal."""
    print("üîß CORRE√á√ÉO DE SINCRONIZA√á√ÉO DESPESAS ‚Üî CONTA CORRENTE")
    print(f"üìÖ Data/Hora: {datetime.now()}")
    print("="*80)
    
    try:
        # 1. Limpar √≥rf√£os
        orfaos_removidos = limpar_lancamentos_orfaos()
        
        # 2. Recriar faltantes
        criados = recriar_lancamentos_faltantes()
        
        # 3. Resultado final
        print("\n" + "="*80)
        print("RESULTADO FINAL")
        print("="*80)
        print(f"üóëÔ∏è Lan√ßamentos √≥rf√£os removidos: {orfaos_removidos}")
        print(f"‚ûï Lan√ßamentos criados: {criados}")
        
        if orfaos_removidos > 0 or criados > 0:
            print("\n‚úÖ CORRE√á√ÉO APLICADA COM SUCESSO!")
            print("   A sincroniza√ß√£o agora deve estar funcionando corretamente.")
        else:
            print("\n‚úÖ NENHUMA CORRE√á√ÉO NECESS√ÅRIA!")
            print("   A sincroniza√ß√£o j√° est√° funcionando corretamente.")
            
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
