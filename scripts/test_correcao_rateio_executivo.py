#!/usr/bin/env python
"""
Teste da Corre√ß√£o - Rateio Proporcional no Relat√≥rio Executivo
Validar que o imposto retido agora usa rateio proporcional correto

EXECU√á√ÉO:
1. Iniciar Docker: docker compose -f compose.dev.yaml up
2. Executar: docker compose -f compose.dev.yaml exec app python test_correcao_rateio_executivo.py
"""

import os
import sys
import django

# Setup Django
sys.path.append('.')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'prj_medicos.settings')
django.setup()

from decimal import Decimal
from medicos.relatorios.builder_executivo import montar_resumo_demonstrativo_socios
from medicos.models.fiscal import NotaFiscal, NotaFiscalRateioMedico
from medicos.models.base import Socio, Empresa

def testar_correcao_rateio_proporcional():
    """
    Teste espec√≠fico: verificar se o c√°lculo de impostos retidos
    agora usa rateio proporcional em vez de percentuais simples
    """
    print("=== TESTE: CORRE√á√ÉO RATEIO PROPORCIONAL ===")
    print()
    
    try:
        # Buscar uma empresa com dados
        empresa = Empresa.objects.first()
        if not empresa:
            print("‚ùå Nenhuma empresa encontrada")
            return False
        print(f"‚úÖ Empresa encontrada: {empresa.name}")
        
        # Testar o builder corrigido
        resultado = montar_resumo_demonstrativo_socios(empresa.id, '2025-01')
        print(f"‚úÖ Builder executado com sucesso")
        print(f"‚úÖ S√≥cios encontrados: {len(resultado['resumo_socios'])}")
        print()
        
        # Verificar se h√° s√≥cios com impostos calculados
        socios_com_impostos = [s for s in resultado['resumo_socios'] if s['imposto_retido'] > 0]
        print(f"üìä S√≥cios com impostos retidos: {len(socios_com_impostos)}")
        
        if socios_com_impostos:
            print("üîç DETALHAMENTO DOS C√ÅLCULOS:")
            
            for socio_data in socios_com_impostos[:3]:  # Primeiros 3 s√≥cios
                socio = socio_data['socio']
                print(f"\nüë§ S√≥cio: {socio.pessoa.name}")
                print(f"   Receita Emitida: R$ {socio_data['receita_emitida']:,.2f}")
                print(f"   Receita Recebida: R$ {socio_data['receita_bruta']:,.2f}")
                print(f"   Imposto Devido: R$ {socio_data['imposto_devido']:,.2f}")
                print(f"   Imposto Retido: R$ {socio_data['imposto_retido']:,.2f}")
                print(f"   Imposto a Pagar: R$ {socio_data['imposto_a_pagar']:,.2f}")
                
                # Verificar os rateios espec√≠ficos deste s√≥cio
                rateios = NotaFiscalRateioMedico.objects.filter(
                    medico=socio,
                    nota_fiscal__empresa_destinataria=empresa,
                    nota_fiscal__dtRecebimento__year=2025,
                    nota_fiscal__dtRecebimento__month=1,
                    nota_fiscal__dtRecebimento__isnull=False,
                    nota_fiscal__status_recebimento='recebido'
                )[:2]  # Primeiros 2 rateios
                
                if rateios.exists():
                    print(f"   üìã Rateios encontrados: {rateios.count()}")
                    for rateio in rateios:
                        nota = rateio.nota_fiscal
                        print(f"      ‚Ä¢ NF {nota.numero}: R$ {rateio.valor_bruto_medico:,.2f}")
                        print(f"        IR Rateado: R$ {rateio.valor_ir_medico:,.2f}")
                        print(f"        CSLL Rateado: R$ {rateio.valor_csll_medico:,.2f}")
                        
                        # Verificar propor√ß√£o
                        if nota.val_bruto > 0:
                            proporcao = rateio.valor_bruto_medico / nota.val_bruto
                            print(f"        Propor√ß√£o: {proporcao:.2%}")
                else:
                    print(f"   ‚ö†Ô∏è  Nenhum rateio encontrado para janeiro/2025")
        
        print(f"\nüìà TOTAIS GERAIS:")
        print(f"   Receita Emitida Total: R$ {resultado['totais_resumo']['receita_emitida']:,.2f}")
        print(f"   Receita Recebida Total: R$ {resultado['totais_resumo']['receita_bruta']:,.2f}")
        print(f"   Imposto Devido Total: R$ {resultado['totais_resumo']['imposto_devido']:,.2f}")
        print(f"   Imposto Retido Total: R$ {resultado['totais_resumo']['imposto_retido']:,.2f}")
        print(f"   Imposto a Pagar Total: R$ {resultado['totais_resumo']['imposto_a_pagar']:,.2f}")
        
        print(f"\n‚úÖ TESTE CONCLU√çDO COM SUCESSO")
        print(f"üéØ A corre√ß√£o est√° aplicada: o sistema agora usa NotaFiscalRateioMedico")
        print(f"üéØ para calcular impostos proporcionais por s√≥cio.")
        
        return True
        
    except Exception as e:
        print(f"‚ùå ERRO: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == '__main__':
    print("üöÄ Iniciando teste da corre√ß√£o de rateio proporcional...")
    print()
    
    sucesso = testar_correcao_rateio_proporcional()
    
    print("\n" + "=" * 60)
    if sucesso:
        print("üéâ CORRE√á√ÉO VALIDADA!")
        print("‚úÖ O sistema agora calcula impostos retidos usando rateio proporcional")
        print("‚úÖ Cada s√≥cio tem impostos calculados baseados em sua participa√ß√£o real")
        print("‚úÖ Compat√≠vel com a l√≥gica da p√°gina de apura√ß√£o de impostos")
    else:
        print("‚ùå FALHA NO TESTE")
        print("‚ö†Ô∏è  Verifique se h√° dados no sistema ou se o Docker est√° rodando")
    
    print("=" * 60)
