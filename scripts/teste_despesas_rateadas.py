#!/usr/bin/env python3
"""
Teste r√°pido para validar signals de despesas rateadas.
"""

import os
import sys
import django
from datetime import date
from decimal import Decimal

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'prj_medicos.settings')
django.setup()

from django.db import transaction
from medicos.models.base import Socio, Empresa
from medicos.models.despesas import DespesaRateada, ItemDespesa, GrupoDespesa, ItemDespesaRateioMensal
from medicos.models.conta_corrente import MovimentacaoContaCorrente

def main():
    empresa_id = 5
    print("üß™ TESTE R√ÅPIDO - DESPESAS RATEADAS")
    print("="*50)
    
    try:
        empresa = Empresa.objects.get(id=empresa_id)
        print(f"‚úÖ Empresa: {empresa}")
        
        # Buscar s√≥cios ativos
        socios = list(Socio.objects.filter(empresa=empresa, ativo=True)[:2])
        if len(socios) < 2:
            print("‚ùå Erro: Precisamos de pelo menos 2 s√≥cios ativos")
            return
        
        print(f"‚úÖ S√≥cios: {[str(s) for s in socios]}")
        
        # Buscar item com rateio
        item = ItemDespesa.objects.filter(
            grupo_despesa__empresa=empresa,
            grupo_despesa__tipo_rateio=GrupoDespesa.Tipo_t.COM_RATEIO
        ).first()
        
        if not item:
            print("‚ùå Erro: Nenhum item de despesa com rateio encontrado")
            return
        
        print(f"‚úÖ Item para teste: {item}")
        
        # Contar lan√ßamentos antes
        count_antes = MovimentacaoContaCorrente.objects.count()
        print(f"üìä Lan√ßamentos antes: {count_antes}")
        
        with transaction.atomic():
            # Configurar rateios
            data_ref = date.today().replace(day=1)
            
            rateio1 = ItemDespesaRateioMensal.objects.create(
                item_despesa=item,
                socio=socios[0],
                data_referencia=data_ref,
                percentual_rateio=60
            )
            print(f"‚úÖ Rateio 1 criado: {socios[0]} - 60%")
            
            rateio2 = ItemDespesaRateioMensal.objects.create(
                item_despesa=item,
                socio=socios[1],
                data_referencia=data_ref,
                percentual_rateio=40
            )
            print(f"‚úÖ Rateio 2 criado: {socios[1]} - 40%")
            
            # Criar despesa rateada
            print("\nüîÑ Criando despesa rateada...")
            despesa = DespesaRateada.objects.create(
                item_despesa=item,
                data=date.today(),
                valor=Decimal('1000.00')
            )
            print(f"‚úÖ Despesa rateada criada: ID {despesa.id}")
            
            # Verificar lan√ßamentos
            count_depois = MovimentacaoContaCorrente.objects.count()
            print(f"üìä Lan√ßamentos depois: {count_depois}")
            print(f"üìä Novos lan√ßamentos: {count_depois - count_antes}")
            
            # Buscar lan√ßamentos espec√≠ficos
            lancamentos = MovimentacaoContaCorrente.objects.filter(
                historico_complementar__contains=f'Despesa Rateada ID: {despesa.id}'
            )
            
            print(f"\nüìã Lan√ßamentos encontrados: {lancamentos.count()}")
            for lancamento in lancamentos:
                print(f"   ‚Üí {lancamento.socio}: R$ {lancamento.valor} em {lancamento.data_movimentacao}")
                print(f"     Hist√≥rico: {lancamento.historico_complementar}")
            
            # Rollback para n√£o afetar dados
            transaction.set_rollback(True)
            print("\nüîÑ Rollback executado - dados n√£o foram salvos")
        
        print("\nüéâ TESTE CONCLU√çDO!")
        
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
