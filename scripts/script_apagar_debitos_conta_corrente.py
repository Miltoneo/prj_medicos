#!/usr/bin/env python3
"""
Script para apagar todas as movimenta√ß√µes de d√©bito da conta corrente de todos os s√≥cios.

ATEN√á√ÉO: Este script remove permanentemente todos os lan√ßamentos de d√©bito (sa√≠das da conta)
da conta corrente. Execute apenas se tiver certeza absoluta da opera√ß√£o.

Defini√ß√£o de d√©bito banc√°rio no sistema:
- D√©bito = Sa√≠da da conta = valor negativo (< 0)
- Cr√©dito = Entrada na conta = valor positivo (> 0)
"""

import os
import sys
import django
from datetime import datetime
from django.db import transaction

# Configurar o ambiente Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'prj_medicos.settings')
django.setup()

from medicos.models.conta_corrente import MovimentacaoContaCorrente
from medicos.models.base import Socio, Empresa


def listar_debitos_existentes():
    """Lista todos os d√©bitos existentes antes da exclus√£o"""
    print("=" * 80)
    print("LISTAGEM DE D√âBITOS EXISTENTES (antes da exclus√£o)")
    print("=" * 80)
    
    # Buscar todos os d√©bitos (valores negativos = sa√≠das da conta)
    debitos = MovimentacaoContaCorrente.objects.filter(valor__lt=0).order_by('data_movimentacao')
    
    if not debitos.exists():
        print("‚ö† Nenhum d√©bito encontrado na conta corrente")
        return 0
    
    total_debitos = debitos.count()
    total_valor = sum(abs(debito.valor) for debito in debitos)
    
    print(f"üìä Total de d√©bitos encontrados: {total_debitos}")
    print(f"üí∞ Valor total dos d√©bitos: R$ {total_valor:,.2f}")
    print()
    
    # Agrupar por s√≥cio
    socios_com_debitos = {}
    for debito in debitos:
        socio_nome = "Sem S√≥cio"
        if debito.socio:
            socio_nome = getattr(getattr(debito.socio, 'pessoa', None), 'name', str(debito.socio))
        
        if socio_nome not in socios_com_debitos:
            socios_com_debitos[socio_nome] = {
                'quantidade': 0,
                'valor_total': 0
            }
        
        socios_com_debitos[socio_nome]['quantidade'] += 1
        socios_com_debitos[socio_nome]['valor_total'] += abs(debito.valor)
    
    print("Resumo por s√≥cio:")
    for socio_nome, dados in socios_com_debitos.items():
        print(f"  üë§ {socio_nome}: {dados['quantidade']} d√©bitos, R$ {dados['valor_total']:,.2f}")
    
    print()
    return total_debitos


def confirmar_exclusao():
    """Solicita confirma√ß√£o do usu√°rio para a exclus√£o"""
    print("‚ö†Ô∏è  ATEN√á√ÉO: OPERA√á√ÉO DESTRUTIVA ‚ö†Ô∏è")
    print("Este script ir√° APAGAR PERMANENTEMENTE todos os d√©bitos da conta corrente!")
    print("Esta opera√ß√£o N√ÉO PODE SER DESFEITA!")
    print()
    
    resposta = input("Digite 'CONFIRMO' (em mai√∫sculas) para prosseguir: ").strip()
    return resposta == "CONFIRMO"


def apagar_todos_os_debitos():
    """Apaga todas as movimenta√ß√µes de d√©bito da conta corrente"""
    print("=" * 80)
    print("EXECUTANDO EXCLUS√ÉO DOS D√âBITOS")
    print("=" * 80)
    
    try:
        with transaction.atomic():
            # Buscar todos os d√©bitos (valores negativos = sa√≠das da conta)
            debitos = MovimentacaoContaCorrente.objects.filter(valor__lt=0)
            
            if not debitos.exists():
                print("‚ö† Nenhum d√©bito encontrado para exclus√£o")
                return 0
            
            total_debitos = debitos.count()
            total_valor = sum(abs(debito.valor) for debito in debitos)
            
            print(f"üóëÔ∏è  Apagando {total_debitos} d√©bitos...")
            print(f"üí∞ Valor total dos d√©bitos: R$ {total_valor:,.2f}")
            
            # Executar a exclus√£o
            resultado = debitos.delete()
            
            print(f"‚úÖ Exclus√£o conclu√≠da!")
            print(f"üìä Registros apagados: {resultado[0]}")
            print(f"üìã Detalhes: {resultado[1]}")
            
            return resultado[0]
            
    except Exception as e:
        print(f"‚ùå Erro durante a exclus√£o: {str(e)}")
        return 0


def validar_exclusao():
    """Valida se a exclus√£o foi bem-sucedida"""
    print("=" * 80)
    print("VALIDA√á√ÉO P√ìS-EXCLUS√ÉO")
    print("=" * 80)
    
    # Verificar se ainda existem d√©bitos
    debitos_restantes = MovimentacaoContaCorrente.objects.filter(valor__lt=0)
    
    if debitos_restantes.exists():
        print(f"‚ö†Ô∏è  Ainda existem {debitos_restantes.count()} d√©bitos no sistema!")
        return False
    else:
        print("‚úÖ Valida√ß√£o conclu√≠da: Nenhum d√©bito encontrado no sistema")
        return True


def main():
    """Fun√ß√£o principal do script"""
    print("üöÄ Iniciando script de exclus√£o de d√©bitos da conta corrente...")
    print(f"üìÖ Data/Hora: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    print()
    
    # Verificar se h√° argumento de confirma√ß√£o autom√°tica
    confirmar_automaticamente = len(sys.argv) > 1 and sys.argv[1] == "--confirmar"
    
    # 1. Listar d√©bitos existentes
    total_inicial = listar_debitos_existentes()
    
    if total_inicial == 0:
        print("‚úÖ Script finalizado: Nenhum d√©bito para apagar")
        return
    
    # 2. Solicitar confirma√ß√£o (se n√£o for autom√°tica)
    if confirmar_automaticamente:
        print("‚úÖ Confirma√ß√£o autom√°tica ativada (--confirmar)")
    elif not confirmar_exclusao():
        print("‚ùå Opera√ß√£o cancelada pelo usu√°rio")
        return
    
    print()
    print("üîÑ Iniciando exclus√£o...")
    
    # 3. Executar a exclus√£o
    registros_apagados = apagar_todos_os_debitos()
    
    if registros_apagados > 0:
        print()
        # 4. Validar exclus√£o
        validacao_ok = validar_exclusao()
        
        if validacao_ok:
            print()
            print("=" * 80)
            print("RESUMO FINAL")
            print("=" * 80)
            print(f"‚úÖ Exclus√£o bem-sucedida!")
            print(f"üìä Total de d√©bitos apagados: {registros_apagados}")
            print(f"üìÖ Data/Hora: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
            print("=" * 80)
        else:
            print("‚ö†Ô∏è  Exclus√£o incompleta - verifique manualmente")
    else:
        print("‚ùå Nenhum registro foi apagado")


if __name__ == "__main__":
    main()
