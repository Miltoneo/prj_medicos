#!/usr/bin/env python3
"""
SCRIPT MELHORADO: Apagar d√©bitos da conta corrente COM sincroniza√ß√£o autom√°tica.
Esta vers√£o garante que os signals sejam disparados corretamente.

Usage:
    python script_apagar_debitos_sincronizado.py --empresa_id 5 --confirmar
"""

import os
import sys
import django
from datetime import datetime
from decimal import Decimal

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'prj_medicos.settings')
django.setup()

from django.db import transaction
from medicos.models.conta_corrente import MovimentacaoContaCorrente
from medicos.models.base import Empresa

def listar_debitos(empresa_id=None):
    """Lista todos os d√©bitos da conta corrente."""
    print("=" * 80)
    print("LISTANDO D√âBITOS ATUAIS")
    print("=" * 80)
    
    # Filtrar d√©bitos (valores negativos = sa√≠das da conta)
    debitos = MovimentacaoContaCorrente.objects.filter(valor__lt=0)
    
    if empresa_id:
        # Filtrar por empresa atrav√©s do s√≥cio
        debitos = debitos.filter(socio__empresa_id=empresa_id)
        empresa = Empresa.objects.get(id=empresa_id)
        print(f"üè¢ Empresa: {empresa}")
    
    if not debitos.exists():
        print("‚úÖ Nenhum d√©bito encontrado")
        return [], 0, Decimal('0.00')
    
    total_debitos = debitos.count()
    total_valor = sum(abs(debito.valor) for debito in debitos)
    
    print(f"üìä Total de d√©bitos: {total_debitos}")
    print(f"üí∞ Valor total: R$ {total_valor:,.2f}")
    print()
    
    # Mostrar os primeiros 10 para refer√™ncia
    print("üìã Primeiros 10 d√©bitos:")
    for i, debito in enumerate(debitos[:10], 1):
        print(f"   {i:2d}. {debito.data_movimentacao} | {debito.socio} | R$ {debito.valor} | {debito.historico_complementar}")
    
    if total_debitos > 10:
        print(f"   ... e mais {total_debitos - 10} d√©bitos")
    
    return list(debitos), total_debitos, total_valor


def apagar_debitos_com_signals(debitos_list):
    """
    Apaga d√©bitos um por um para garantir que signals sejam disparados.
    IMPORTANTE: Isso permite sincroniza√ß√£o autom√°tica com despesas.
    """
    print("=" * 80)
    print("EXECUTANDO EXCLUS√ÉO COM SINCRONIZA√á√ÉO")
    print("=" * 80)
    
    if not debitos_list:
        print("‚ö†Ô∏è Lista de d√©bitos vazia")
        return 0
    
    total_debitos = len(debitos_list)
    print(f"üóëÔ∏è Iniciando exclus√£o de {total_debitos} d√©bitos...")
    print("‚ö†Ô∏è Usando exclus√£o individual para disparar signals!")
    
    removidos = 0
    
    try:
        with transaction.atomic():
            for i, debito in enumerate(debitos_list, 1):
                # Mostrar progresso a cada 50 itens
                if i % 50 == 0 or i == total_debitos:
                    print(f"   üìä Progresso: {i}/{total_debitos} ({(i/total_debitos)*100:.1f}%)")
                
                # Excluir individualmente (dispara signals)
                debito.delete()
                removidos += 1
        
        print(f"‚úÖ Exclus√£o conclu√≠da!")
        print(f"üìä D√©bitos removidos: {removidos}")
        
        return removidos
        
    except Exception as e:
        print(f"‚ùå Erro durante a exclus√£o: {str(e)}")
        return removidos


def apagar_debitos_em_lote(debitos_queryset):
    """
    Apaga d√©bitos em lote (MAIS R√ÅPIDO mas N√ÉO dispara signals).
    ATEN√á√ÉO: Esta op√ß√£o pode causar inconsist√™ncias na sincroniza√ß√£o!
    """
    print("=" * 80)
    print("EXECUTANDO EXCLUS√ÉO EM LOTE (SEM SINCRONIZA√á√ÉO)")
    print("=" * 80)
    
    total_debitos = debitos_queryset.count()
    total_valor = sum(abs(debito.valor) for debito in debitos_queryset)
    
    print(f"üóëÔ∏è Apagando {total_debitos} d√©bitos em lote...")
    print(f"üí∞ Valor total: R$ {total_valor:,.2f}")
    print("‚ö†Ô∏è AVISO: Signals N√ÉO ser√£o disparados!")
    
    try:
        with transaction.atomic():
            resultado = debitos_queryset.delete()
            
        print(f"‚úÖ Exclus√£o conclu√≠da!")
        print(f"üìä Registros apagados: {resultado[0]}")
        print(f"üìã Detalhes: {resultado[1]}")
        
        return resultado[0]
        
    except Exception as e:
        print(f"‚ùå Erro durante a exclus√£o: {str(e)}")
        return 0


def validar_exclusao(empresa_id=None):
    """Valida se a exclus√£o foi bem-sucedida."""
    print("=" * 80)
    print("VALIDA√á√ÉO P√ìS-EXCLUS√ÉO")
    print("=" * 80)
    
    debitos = MovimentacaoContaCorrente.objects.filter(valor__lt=0)
    
    if empresa_id:
        debitos = debitos.filter(socio__empresa_id=empresa_id)
    
    count_restantes = debitos.count()
    
    if count_restantes == 0:
        print("‚úÖ SUCESSO: Todos os d√©bitos foram removidos")
    else:
        print(f"‚ö†Ô∏è Ainda restam {count_restantes} d√©bitos")
        
        # Mostrar alguns exemplos
        for debito in debitos[:5]:
            print(f"   ‚Üí {debito.data_movimentacao} | {debito.socio} | R$ {debito.valor}")
    
    return count_restantes


def main():
    """Fun√ß√£o principal."""
    import argparse
    
    parser = argparse.ArgumentParser(description='Apagar d√©bitos da conta corrente com op√ß√µes de sincroniza√ß√£o')
    parser.add_argument('--empresa_id', type=int, help='ID da empresa (opcional, se n√£o informado apaga de todas)')
    parser.add_argument('--metodo', choices=['individual', 'lote'], default='individual', 
                        help='M√©todo de exclus√£o: individual (com signals) ou lote (sem signals)')
    parser.add_argument('--confirmar', action='store_true', help='Confirma a exclus√£o sem intera√ß√£o')
    
    args = parser.parse_args()
    
    print("üóëÔ∏è SCRIPT DE EXCLUS√ÉO DE D√âBITOS DA CONTA CORRENTE")
    print(f"üìÖ Data/Hora: {datetime.now()}")
    print(f"üîß M√©todo: {args.metodo}")
    if args.empresa_id:
        print(f"üè¢ Empresa ID: {args.empresa_id}")
    else:
        print(f"üè¢ Escopo: Todas as empresas")
    print()
    
    try:
        # Listar d√©bitos atuais
        debitos_list, total_debitos, total_valor = listar_debitos(args.empresa_id)
        
        if total_debitos == 0:
            print("‚úÖ Nada para fazer - n√£o h√° d√©bitos para excluir")
            return
        
        # Solicitar confirma√ß√£o
        if not args.confirmar:
            print("‚ö†Ô∏è ATEN√á√ÉO: OPERA√á√ÉO DESTRUTIVA ‚ö†Ô∏è")
            print("Este script ir√° APAGAR PERMANENTEMENTE os d√©bitos listados!")
            print("Esta opera√ß√£o N√ÉO PODE SER DESFEITA!")
            print()
            
            if args.metodo == 'lote':
                print("üö® M√âTODO LOTE SELECIONADO:")
                print("   ‚Üí Mais r√°pido, mas N√ÉO dispara signals")
                print("   ‚Üí Pode causar inconsist√™ncias na sincroniza√ß√£o com despesas")
                print("   ‚Üí Recomendado apenas se voc√™ souber o que est√° fazendo")
            else:
                print("‚úÖ M√âTODO INDIVIDUAL SELECIONADO:")
                print("   ‚Üí Dispara signals corretamente")
                print("   ‚Üí Mant√©m sincroniza√ß√£o com despesas")
                print("   ‚Üí Recomendado para opera√ß√£o segura")
            
            resposta = input("\nDigite 'CONFIRMO' (em mai√∫sculas) para prosseguir: ").strip()
            if resposta != "CONFIRMO":
                print("‚ùå Opera√ß√£o cancelada pelo usu√°rio")
                return
        
        # Executar exclus√£o conforme m√©todo escolhido
        if args.metodo == 'individual':
            removidos = apagar_debitos_com_signals(debitos_list)
        else:
            # Recriar queryset para lote
            debitos_qs = MovimentacaoContaCorrente.objects.filter(valor__lt=0)
            if args.empresa_id:
                debitos_qs = debitos_qs.filter(socio__empresa_id=args.empresa_id)
            removidos = apagar_debitos_em_lote(debitos_qs)
        
        # Validar resultado
        count_restantes = validar_exclusao(args.empresa_id)
        
        # Resultado final
        print("\n" + "=" * 80)
        print("RESULTADO FINAL")
        print("=" * 80)
        print(f"üìä D√©bitos removidos: {removidos}")
        print(f"üìä D√©bitos restantes: {count_restantes}")
        
        if count_restantes == 0:
            print("üéâ EXCLUS√ÉO 100% CONCLU√çDA!")
        else:
            print("‚ö†Ô∏è Exclus√£o parcial - verifique os d√©bitos restantes")
            
        if args.metodo == 'lote':
            print("\n‚ö†Ô∏è ATEN√á√ÉO: M√©todo lote foi usado!")
            print("   Recomenda-se executar o script de corre√ß√£o de sincroniza√ß√£o:")
            print("   ‚Üí python corrigir_sincronizacao.py")
        
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
