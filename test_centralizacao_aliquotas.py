#!/usr/bin/env python3
"""
Teste de Valida√ß√£o da Centraliza√ß√£o Completa de Al√≠quotas
- Verifica se n√£o h√° mais campos de al√≠quotas no modelo Empresa
- Testa se toda l√≥gica de al√≠quotas est√° centralizada no modelo Aliquotas
"""

import os
import sys
import django
from decimal import Decimal

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'prj_medicos.settings')
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
django.setup()

from medicos.models import Conta, Empresa, Aliquotas
from django.core.exceptions import ValidationError

def test_centralizacao_aliquotas():
    """Testa se a centraliza√ß√£o de al√≠quotas est√° completa"""
    
    print("=== TESTE DE CENTRALIZA√á√ÉO DE AL√çQUOTAS ===\n")
    
    # 1. Verificar se Empresa n√£o possui campos de al√≠quotas
    print("1. Verificando campos do modelo Empresa...")
    empresa_fields = [field.name for field in Empresa._meta.get_fields()]
    campos_aliquotas = [f for f in empresa_fields if 'aliquota' in f.lower() or 'iss' in f.lower()]
    
    if campos_aliquotas:
        print(f"‚ùå ERRO: Empresa ainda possui campos de al√≠quotas: {campos_aliquotas}")
        return False
    else:
        print("‚úÖ OK: Empresa n√£o possui campos de al√≠quotas")
    
    # 2. Verificar m√©todos de al√≠quotas no modelo Empresa
    print("\n2. Verificando m√©todos relacionados a al√≠quotas na Empresa...")
    empresa_methods = [method for method in dir(Empresa) if not method.startswith('_')]
    metodos_aliquotas = [m for m in empresa_methods if 'aliquota' in m.lower() or 'imposto' in m.lower()]
    
    if metodos_aliquotas:
        print(f"‚ö†Ô∏è  AVISO: Empresa ainda possui m√©todos de al√≠quotas: {metodos_aliquotas}")
        print("   (Estes devem ser removidos para centraliza√ß√£o completa)")
    else:
        print("‚úÖ OK: Empresa n√£o possui m√©todos de al√≠quotas")
    
    # 3. Verificar modelo Aliquotas
    print("\n3. Verificando modelo Aliquotas...")
    aliquotas_fields = [field.name for field in Aliquotas._meta.get_fields()]
    campos_iss = [f for f in aliquotas_fields if 'ISS' in f]
    
    expected_iss_fields = ['ISS_CONSULTAS', 'ISS_PLANTAO', 'ISS_OUTROS']
    missing_fields = [f for f in expected_iss_fields if f not in campos_iss]
    
    if missing_fields:
        print(f"‚ùå ERRO: Campos ISS ausentes no modelo Aliquotas: {missing_fields}")
        return False
    else:
        print(f"‚úÖ OK: Modelo Aliquotas possui todos os campos ISS: {expected_iss_fields}")
    
    # 4. Testar funcionalidade centralizada
    print("\n4. Testando funcionalidade centralizada...")
    
    try:
        # Criar conta de teste
        conta_teste = Conta.objects.create(name="Teste Centraliza√ß√£o")
        
        # Criar empresa sem al√≠quotas
        empresa_teste = Empresa.objects.create(
            conta=conta_teste,
            name="Empresa Teste",
            cnpj="12345678000199"
        )
        print("‚úÖ OK: Empresa criada sem campos de al√≠quotas")
        
        # Testar obten√ß√£o de al√≠quota padr√£o (sem configura√ß√£o)
        aliquota_consultas = Aliquotas.obter_aliquota_ou_padrao(conta_teste, 'consultas')
        aliquota_plantao = Aliquotas.obter_aliquota_ou_padrao(conta_teste, 'plantao')
        aliquota_outros = Aliquotas.obter_aliquota_ou_padrao(conta_teste, 'outros')
        
        print(f"‚úÖ OK: Al√≠quotas padr√£o - Consultas: {aliquota_consultas}%, Plant√£o: {aliquota_plantao}%, Outros: {aliquota_outros}%")
        
        # Criar configura√ß√£o de al√≠quotas
        aliquotas_config = Aliquotas.objects.create(
            conta=conta_teste,
            ISS_CONSULTAS=Decimal('3.00'),
            ISS_PLANTAO=Decimal('3.50'),
            ISS_OUTROS=Decimal('4.00'),
            PIS=Decimal('0.65'),
            COFINS=Decimal('3.00'),
            data_vigencia_inicio='2025-01-01'
        )
        print("‚úÖ OK: Configura√ß√£o de al√≠quotas criada")
        
        # Testar obten√ß√£o de al√≠quota configurada
        aliquota_config_consultas = Aliquotas.obter_aliquota_ou_padrao(conta_teste, 'consultas')
        aliquota_config_plantao = Aliquotas.obter_aliquota_ou_padrao(conta_teste, 'plantao')
        aliquota_config_outros = Aliquotas.obter_aliquota_ou_padrao(conta_teste, 'outros')
        
        print(f"‚úÖ OK: Al√≠quotas configuradas - Consultas: {aliquota_config_consultas}%, Plant√£o: {aliquota_config_plantao}%, Outros: {aliquota_config_outros}%")
        
        # Testar c√°lculo de impostos
        resultado_calculo = aliquotas_config.calcular_impostos_nf(Decimal('1000.00'), 'consultas')
        print(f"‚úÖ OK: C√°lculo de impostos - ISS: R$ {resultado_calculo['valor_iss']}, Total: R$ {resultado_calculo['total_impostos']}")
        
        # Limpar dados de teste
        conta_teste.delete()
        print("‚úÖ OK: Dados de teste removidos")
        
        # 5. Testar regime tribut√°rio
        print("\n5. Testando integra√ß√£o com regime tribut√°rio...")
        
        conta_regime = Conta.objects.create(name="Teste Regime")
        
        # Empresa com compet√™ncia
        empresa_comp = Empresa.objects.create(
            conta=conta_regime,
            name="Empresa Comp",
            cnpj="11111111000188",
            regime_tributario=1  # COMPET√äNCIA
        )
        
        # Empresa com caixa
        empresa_caixa = Empresa.objects.create(
            conta=conta_regime,
            name="Empresa Caixa",
            cnpj="22222222000188", 
            regime_tributario=2  # CAIXA
        )
        
        print(f"‚úÖ OK: Empresas criadas - Compet√™ncia: {empresa_comp.regime_tributario_nome}, Caixa: {empresa_caixa.regime_tributario_nome}")
        
        # Testar c√°lculo com regime
        config_aliquotas = Aliquotas.objects.create(
            conta=conta_regime,
            ISS_CONSULTAS=Decimal('3.00'),
            data_vigencia_inicio='2025-01-01'
        )
        
        resultado_comp = Aliquotas.calcular_impostos_para_empresa(
            empresa=empresa_comp,
            valor_bruto=Decimal('1000.00'),
            tipo_servico='consultas'
        )
        
        resultado_caixa = Aliquotas.calcular_impostos_para_empresa(
            empresa=empresa_caixa,
            valor_bruto=Decimal('1000.00'),
            tipo_servico='consultas'
        )
        
        print(f"‚úÖ OK: C√°lculos com regime - Comp: {resultado_comp['regime_tributario']['nome']}, Caixa: {resultado_caixa['regime_tributario']['nome']}")
        
        # Limpar
        conta_regime.delete()
        print("‚úÖ OK: Dados de teste de regime removidos")
        
    except Exception as e:
        print(f"‚ùå ERRO no teste de funcionalidade: {e}")
        return False
    
    return True

def test_acesso_via_relacionamento():
    """Testa acesso a al√≠quotas via relacionamento da conta"""
    
    print("\n5. Testando acesso via relacionamento...")
    
    try:
        # Criar dados de teste
        conta = Conta.objects.create(name="Teste Relacionamento")
        empresa = Empresa.objects.create(conta=conta, name="Empresa Rel", cnpj="98765432000199")
        
        # Acessar al√≠quotas via relacionamento
        aliquotas_via_conta = conta.aliquotas.all()
        aliquotas_via_empresa = empresa.conta.aliquotas.all()
        
        print("‚úÖ OK: Acesso via relacionamento funcionando")
        print(f"   - Via conta: {aliquotas_via_conta.count()} configura√ß√µes")
        print(f"   - Via empresa->conta: {aliquotas_via_empresa.count()} configura√ß√µes")
        
        # Limpar
        conta.delete()
        
        return True
        
    except Exception as e:
        print(f"‚ùå ERRO no teste de relacionamento: {e}")
        return False

if __name__ == "__main__":
    try:
        sucesso1 = test_centralizacao_aliquotas()
        sucesso2 = test_acesso_via_relacionamento()
        
        print(f"\n=== RESULTADO FINAL ===")
        if sucesso1 and sucesso2:
            print("‚úÖ SUCESSO: Centraliza√ß√£o de al√≠quotas est√° COMPLETA!")
            print("\nüìã RESUMO:")
            print("  ‚Ä¢ Modelo Empresa: SEM campos de al√≠quotas")
            print("  ‚Ä¢ Modelo Aliquotas: CENTRALIZA toda l√≥gica fiscal")
            print("  ‚Ä¢ Funcionalidade: PRESERVADA com valores padr√£o")
            print("  ‚Ä¢ Relacionamentos: FUNCIONANDO corretamente")
        else:
            print("‚ùå FALHOU: Centraliza√ß√£o incompleta - verificar erros acima")
        
    except Exception as e:
        print(f"‚ùå ERRO GERAL: {e}")
        import traceback
        traceback.print_exc()
