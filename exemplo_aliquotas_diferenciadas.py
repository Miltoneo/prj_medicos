#!/usr/bin/env python3
"""
Exemplo Pr√°tico - Al√≠quotas Diferenciadas por Tipo de Servi√ßo M√©dico
Sistema de Contabilidade para Associa√ß√µes M√©dicas
"""

from decimal import Decimal
from datetime import date

def exemplo_aliquotas_diferenciadas():
    """
    Demonstra como diferentes tipos de servi√ßos m√©dicos podem ter 
    al√≠quotas de ISS diferenciadas
    """
    print("=" * 80)
    print("EXEMPLO: AL√çQUOTAS DIFERENCIADAS POR TIPO DE SERVI√áO M√âDICO")
    print("=" * 80)
    
    # Configura√ß√£o de al√≠quotas diferenciadas (exemplo real)
    configuracao = {
        'ISS_CONSULTAS': Decimal('3.00'),      # 3% para consultas
        'ISS_PLANTAO': Decimal('2.50'),        # 2,5% para plant√£o (incentivo)  
        'ISS_OUTROS': Decimal('4.00'),         # 4% para outros servi√ßos
        'PIS': Decimal('0.65'),                # Uniforme
        'COFINS': Decimal('3.00'),             # Uniforme
        'IRPJ_BASE_CAL': Decimal('32.00'),     # Uniforme
        'IRPJ_ALIC_1': Decimal('15.00'),       # Uniforme
        'CSLL_BASE_CAL': Decimal('32.00'),     # Uniforme
        'CSLL_ALIC_1': Decimal('9.00'),        # Uniforme
    }
    
    # Valor da nota fiscal para compara√ß√£o
    valor_nota = Decimal('10000.00')
    
    print(f"Valor da Nota Fiscal: R$ {valor_nota:,.2f}")
    print(f"Configura√ß√£o de Al√≠quotas:")
    print(f"  - ISS Consultas: {configuracao['ISS_CONSULTAS']}%")
    print(f"  - ISS Plant√£o: {configuracao['ISS_PLANTAO']}%") 
    print(f"  - ISS Outros: {configuracao['ISS_OUTROS']}%")
    print(f"  - PIS: {configuracao['PIS']}% (uniforme)")
    print(f"  - COFINS: {configuracao['COFINS']}% (uniforme)")
    print(f"  - IRPJ: {configuracao['IRPJ_ALIC_1']}% sobre {configuracao['IRPJ_BASE_CAL']}% da receita")
    print(f"  - CSLL: {configuracao['CSLL_ALIC_1']}% sobre {configuracao['CSLL_BASE_CAL']}% da receita")
    print()
    
    # Calcular para cada tipo de servi√ßo
    servicos = [
        ('CONSULTAS M√âDICAS', 'ISS_CONSULTAS'),
        ('PLANT√ÉO M√âDICO', 'ISS_PLANTAO'),
        ('VACINA√á√ÉO/EXAMES/PROCEDIMENTOS', 'ISS_OUTROS')
    ]
    
    resultados = []
    
    for nome_servico, campo_iss in servicos:
        print(f"üìã {nome_servico}")
        print("-" * 50)
        
        # ISS espec√≠fico do servi√ßo
        aliquota_iss = configuracao[campo_iss]
        valor_iss = valor_nota * (aliquota_iss / 100)
        
        # Impostos federais (uniformes)
        valor_pis = valor_nota * (configuracao['PIS'] / 100)
        valor_cofins = valor_nota * (configuracao['COFINS'] / 100)
        
        # Base para IR e CSLL
        base_ir = valor_nota * (configuracao['IRPJ_BASE_CAL'] / 100)
        base_csll = valor_nota * (configuracao['CSLL_BASE_CAL'] / 100)
        
        valor_ir = base_ir * (configuracao['IRPJ_ALIC_1'] / 100)
        valor_csll = base_csll * (configuracao['CSLL_ALIC_1'] / 100)
        
        total_impostos = valor_iss + valor_pis + valor_cofins + valor_ir + valor_csll
        valor_liquido = valor_nota - total_impostos
        carga_tributaria = (total_impostos / valor_nota) * 100
        
        print(f"  ISS ({aliquota_iss}%):     R$ {valor_iss:>8,.2f}")
        print(f"  PIS (0,65%):    R$ {valor_pis:>8,.2f}")
        print(f"  COFINS (3%):    R$ {valor_cofins:>8,.2f}")
        print(f"  IRPJ (15%):     R$ {valor_ir:>8,.2f}")
        print(f"  CSLL (9%):      R$ {valor_csll:>8,.2f}")
        print(f"  " + "‚îÄ" * 30)
        print(f"  Total Impostos: R$ {total_impostos:>8,.2f}")
        print(f"  Valor L√≠quido:  R$ {valor_liquido:>8,.2f}")
        print(f"  Carga Tribut√°ria: {carga_tributaria:>6.2f}%")
        print()
        
        resultados.append({
            'servico': nome_servico,
            'iss': valor_iss,
            'total_impostos': total_impostos,
            'valor_liquido': valor_liquido,
            'carga_tributaria': carga_tributaria
        })
    
    # Compara√ß√£o dos resultados
    print("üìä COMPARA√á√ÉO ENTRE TIPOS DE SERVI√áO")
    print("=" * 80)
    print(f"{'Tipo de Servi√ßo':<35} {'ISS':<12} {'Total Imp.':<12} {'L√≠quido':<12} {'Carga %':<8}")
    print("-" * 80)
    
    for resultado in resultados:
        print(f"{resultado['servico']:<35} "
              f"R$ {resultado['iss']:>7,.2f} "
              f"R$ {resultado['total_impostos']:>8,.2f} "
              f"R$ {resultado['valor_liquido']:>8,.2f} "
              f"{resultado['carga_tributaria']:>6.2f}%")
    
    # Diferen√ßas em valores absolutos
    print("\nüí∞ DIFEREN√áAS EM VALORES ABSOLUTOS")
    print("-" * 50)
    
    consultas = resultados[0]
    plantao = resultados[1] 
    outros = resultados[2]
    
    # Comparar plant√£o vs consultas
    dif_plantao_consultas = consultas['total_impostos'] - plantao['total_impostos']
    print(f"Plant√£o vs Consultas:")
    print(f"  Economia em impostos: R$ {dif_plantao_consultas:,.2f}")
    print(f"  Valor l√≠quido maior: R$ {plantao['valor_liquido'] - consultas['valor_liquido']:,.2f}")
    
    # Comparar outros vs consultas  
    dif_outros_consultas = outros['total_impostos'] - consultas['total_impostos']
    print(f"\nOutros Servi√ßos vs Consultas:")
    print(f"  Impostos adicionais: R$ {dif_outros_consultas:,.2f}")
    print(f"  Valor l√≠quido menor: R$ {consultas['valor_liquido'] - outros['valor_liquido']:,.2f}")

def exemplo_codigo_implementacao():
    """
    Demonstra como implementar as al√≠quotas diferenciadas no c√≥digo
    """
    print("\n" + "=" * 80)
    print("IMPLEMENTA√á√ÉO NO C√ìDIGO DJANGO")
    print("=" * 80)
    
    codigo_exemplo = '''
# 1. Configurar al√≠quotas diferenciadas
aliquota = Aliquotas.objects.create(
    conta=associacao_medica,
    # ISS diferenciado por tipo de servi√ßo
    ISS_CONSULTAS=Decimal('3.00'),      # 3% para consultas
    ISS_PLANTAO=Decimal('2.50'),        # 2,5% para plant√£o  
    ISS_OUTROS=Decimal('4.00'),         # 4% para outros servi√ßos
    
    # Impostos federais (uniformes)
    PIS=Decimal('0.65'),
    COFINS=Decimal('3.00'),
    IRPJ_BASE_CAL=Decimal('32.00'),
    IRPJ_ALIC_1=Decimal('15.00'),
    CSLL_BASE_CAL=Decimal('32.00'),
    CSLL_ALIC_1=Decimal('9.00'),
    ativa=True
)

# 2. Criar nota fiscal especificando tipo de servi√ßo
nota_consulta = NotaFiscal.objects.create(
    conta=associacao,
    numero="NF001",
    val_bruto=Decimal('10000.00'),
    data_emissao=date.today(),
    tipo_aliquota=1,  # CONSULTAS
    descricao_servicos="Consultas m√©dicas especializadas"
)

nota_plantao = NotaFiscal.objects.create(
    conta=associacao,
    numero="NF002", 
    val_bruto=Decimal('10000.00'),
    data_emissao=date.today(),
    tipo_aliquota=2,  # PLANT√ÉO
    descricao_servicos="Plant√£o m√©dico emergencial"
)

nota_outros = NotaFiscal.objects.create(
    conta=associacao,
    numero="NF003",
    val_bruto=Decimal('10000.00'),
    data_emissao=date.today(),
    tipo_aliquota=3,  # OUTROS
    descricao_servicos="Vacina√ß√£o e exames laboratoriais"
)

# 3. Aplicar c√°lculos autom√°ticos
for nota in [nota_consulta, nota_plantao, nota_outros]:
    nota.calcular_impostos_automaticamente()
    nota.save()
    
    print(f"Nota {nota.numero} ({nota.tipo_servico_descricao}):")
    print(f"  ISS: R$ {nota.val_ISS}")
    print(f"  Total impostos: R$ {nota.val_bruto - nota.val_liquido}")
    print(f"  Valor l√≠quido: R$ {nota.val_liquido}")

# 4. C√°lculo direto por tipo
resultado_consultas = aliquota.calcular_impostos_nf(
    Decimal('10000.00'), 'consultas'
)
resultado_plantao = aliquota.calcular_impostos_nf(
    Decimal('10000.00'), 'plantao'  
)
resultado_outros = aliquota.calcular_impostos_nf(
    Decimal('10000.00'), 'outros'
)

print("Compara√ß√£o de ISS:")
print(f"  Consultas: R$ {resultado_consultas['valor_iss']}")
print(f"  Plant√£o: R$ {resultado_plantao['valor_iss']}")
print(f"  Outros: R$ {resultado_outros['valor_iss']}")
'''
    
    print(codigo_exemplo)

def exemplo_beneficios_negocio():
    """
    Demonstra os benef√≠cios de neg√≥cio das al√≠quotas diferenciadas
    """
    print("\n" + "=" * 80)
    print("BENEF√çCIOS DE NEG√ìCIO")
    print("=" * 80)
    
    beneficios = [
        "üè• CONFORMIDADE FISCAL",
        "   ‚Ä¢ Aplica√ß√£o correta das al√≠quotas conforme legisla√ß√£o municipal",
        "   ‚Ä¢ Redu√ß√£o de riscos de autua√ß√£o fiscal",
        "   ‚Ä¢ Documenta√ß√£o autom√°tica do tipo de servi√ßo prestado",
        "",
        "üí∞ OTIMIZA√á√ÉO TRIBUT√ÅRIA",
        "   ‚Ä¢ Aproveitamento de al√≠quotas reduzidas para plant√µes",
        "   ‚Ä¢ Classifica√ß√£o correta evita pagamento excessivo de impostos",
        "   ‚Ä¢ Planejamento tribut√°rio mais preciso",
        "",
        "‚ö° AUTOMATIZA√á√ÉO",
        "   ‚Ä¢ C√°lculo autom√°tico baseado no tipo de servi√ßo",
        "   ‚Ä¢ Elimina√ß√£o de erros manuais de classifica√ß√£o",
        "   ‚Ä¢ Agilidade no processamento das notas fiscais",
        "",
        "üìä CONTROLE GERENCIAL",
        "   ‚Ä¢ Relat√≥rios de carga tribut√°ria por tipo de servi√ßo",
        "   ‚Ä¢ An√°lise de rentabilidade por modalidade",
        "   ‚Ä¢ Suporte √† tomada de decis√µes estrat√©gicas",
        "",
        "üîç AUDITORIA E TRANSPAR√äNCIA",
        "   ‚Ä¢ Hist√≥rico completo das al√≠quotas aplicadas",
        "   ‚Ä¢ Rastreabilidade dos c√°lculos tribut√°rios",
        "   ‚Ä¢ Facilita auditorias internas e externas"
    ]
    
    for beneficio in beneficios:
        print(beneficio)

if __name__ == "__main__":
    exemplo_aliquotas_diferenciadas()
    exemplo_codigo_implementacao()
    exemplo_beneficios_negocio()
    
    print("\n" + "=" * 80)
    print("‚úÖ SISTEMA DE AL√çQUOTAS DIFERENCIADAS IMPLEMENTADO COM SUCESSO!")
    print("üöÄ Pronto para uso em produ√ß√£o!")
    print("=" * 80)
