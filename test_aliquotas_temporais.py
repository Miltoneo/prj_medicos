#!/usr/bin/env python
"""
Script de teste para o sistema temporal de al√≠quotas ISS

Este script testa:
1. Configura√ß√µes temporais de al√≠quotas (mensais/decretos)
2. Hierarquia de al√≠quotas (empresa > conta temporal > padr√£o)
3. Valida√ß√µes de sobreposi√ß√£o de vig√™ncias
4. C√°lculos com al√≠quotas espec√≠ficas por data
5. Hist√≥rico de altera√ß√µes de al√≠quotas
"""

import os
import sys
import django
from decimal import Decimal
from datetime import date, timedelta

# Configurar Django
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'prj_medicos.settings')
django.setup()

from django.core.exceptions import ValidationError
from medicos.models import Conta, Empresa
from medicos.models.fiscal import Aliquotas


def criar_dados_teste():
    """Cria dados b√°sicos para teste"""
    print("\nüèóÔ∏è Criando dados de teste...")
    
    # Criar conta de teste
    conta, created = Conta.objects.get_or_create(
        name='Conta Teste Al√≠quotas Temporais',
        defaults={'cnpj': '12345678000199'}
    )
    
    print(f"‚úÖ Conta: {conta}")
    return conta


def testar_aliquotas_temporais(conta):
    """Testa as configura√ß√µes temporais de al√≠quotas"""
    print("\nüìÖ TESTANDO AL√çQUOTAS TEMPORAIS")
    print("=" * 50)
    
    hoje = date.today()
    mes_passado = hoje.replace(day=1) - timedelta(days=1)
    mes_passado = mes_passado.replace(day=1)
    proximo_mes = (hoje.replace(day=1) + timedelta(days=32)).replace(day=1)
    
    print(f"M√™s passado: {mes_passado}")
    print(f"Hoje: {hoje}")
    print(f"Pr√≥ximo m√™s: {proximo_mes}")
    
    # Teste 1: Criar al√≠quotas do m√™s passado
    print("\n1. Criando al√≠quotas do m√™s passado...")
    aliquotas_passado = Aliquotas.objects.create(
        conta=conta,
        ISS_CONSULTAS=Decimal('2.00'),
        ISS_PLANTAO=Decimal('2.00'),
        ISS_OUTROS=Decimal('3.00'),
        ativa=True,
        data_vigencia_inicio=mes_passado,
        data_vigencia_fim=hoje - timedelta(days=1),
        observacoes="Al√≠quotas do m√™s passado"
    )
    print(f"‚úÖ Al√≠quotas m√™s passado: {aliquotas_passado}")
    
    # Teste 2: Criar al√≠quotas atuais (decreto mudou as al√≠quotas)
    print("\n2. Criando al√≠quotas atuais (decreto municipal mudou)...")
    aliquotas_atual = Aliquotas.objects.create(
        conta=conta,
        ISS_CONSULTAS=Decimal('2.50'),  # Aumento por decreto
        ISS_PLANTAO=Decimal('2.50'),    # Aumento por decreto
        ISS_OUTROS=Decimal('3.50'),     # Aumento por decreto
        ativa=True,
        data_vigencia_inicio=hoje,
        data_vigencia_fim=proximo_mes - timedelta(days=1),
        observacoes="Decreto municipal 2025/001 - aumento das al√≠quotas"
    )
    print(f"‚úÖ Al√≠quotas atuais: {aliquotas_atual}")
    
    # Teste 3: Criar al√≠quotas futuras (j√° programadas)
    print("\n3. Criando al√≠quotas futuras (j√° programadas)...")
    aliquotas_futuro = Aliquotas.objects.create(
        conta=conta,
        ISS_CONSULTAS=Decimal('3.00'),  # Novo aumento programado
        ISS_PLANTAO=Decimal('3.00'),
        ISS_OUTROS=Decimal('4.00'),
        ativa=True,
        data_vigencia_inicio=proximo_mes,
        # Sem data_vigencia_fim = vig√™ncia indefinida
        observacoes="Al√≠quotas programadas para o pr√≥ximo m√™s"
    )
    print(f"‚úÖ Al√≠quotas futuras: {aliquotas_futuro}")
    
    return aliquotas_passado, aliquotas_atual, aliquotas_futuro


def testar_busca_por_data(conta, aliquotas_passado, aliquotas_atual, aliquotas_futuro):
    """Testa a busca de al√≠quotas por data espec√≠fica"""
    print("\nüîç TESTANDO BUSCA POR DATA ESPEC√çFICA")
    print("=" * 50)
    
    hoje = date.today()
    data_passado = aliquotas_passado.data_vigencia_inicio + timedelta(days=5)
    data_futuro = aliquotas_futuro.data_vigencia_inicio + timedelta(days=5)
    
    # Teste busca no passado
    print(f"\n1. Buscando al√≠quota para {data_passado}...")
    aliq_encontrada_passado = Aliquotas.obter_aliquota_vigente(conta, data_passado)
    print(f"Encontrada: {aliq_encontrada_passado}")
    print(f"ISS Consultas: {aliq_encontrada_passado.ISS_CONSULTAS}%")
    
    # Teste busca atual
    print(f"\n2. Buscando al√≠quota para hoje ({hoje})...")
    aliq_encontrada_atual = Aliquotas.obter_aliquota_vigente(conta, hoje)
    print(f"Encontrada: {aliq_encontrada_atual}")
    print(f"ISS Consultas: {aliq_encontrada_atual.ISS_CONSULTAS}%")
    
    # Teste busca futura
    print(f"\n3. Buscando al√≠quota para {data_futuro}...")
    aliq_encontrada_futuro = Aliquotas.obter_aliquota_vigente(conta, data_futuro)
    print(f"Encontrada: {aliq_encontrada_futuro}")
    print(f"ISS Consultas: {aliq_encontrada_futuro.ISS_CONSULTAS}%")


def testar_empresa_com_sistema_temporal(conta):
    """Testa empresa utilizando o sistema temporal de al√≠quotas"""
    print("\nüè• TESTANDO EMPRESA COM SISTEMA TEMPORAL")
    print("=" * 50)
    
    # Criar empresa sem al√≠quotas espec√≠ficas (usa configura√ß√µes da conta)
    empresa = Empresa.objects.create(
        conta=conta,
        name='Hospital Temporal Ltda',
        nome_fantasia='Hospital Temporal',
        cnpj='11222333000144',
        usa_aliquotas_especificas=False  # Usa configura√ß√µes da conta
    )
    print(f"Empresa criada: {empresa}")
    
    hoje = date.today()
    mes_passado = hoje.replace(day=1) - timedelta(days=1)
    mes_passado = mes_passado.replace(day=1)
    proximo_mes = (hoje.replace(day=1) + timedelta(days=32)).replace(day=1)
    
    # Testar al√≠quotas por data
    print(f"\n1. Al√≠quotas para o m√™s passado ({mes_passado}):")
    resumo_passado = empresa.get_resumo_aliquotas(mes_passado + timedelta(days=5))
    print(f"  - Consultas: {resumo_passado['consultas']}%")
    print(f"  - Plant√£o: {resumo_passado['plantao']}%")
    print(f"  - Outros: {resumo_passado['outros']}%")
    
    print(f"\n2. Al√≠quotas para hoje ({hoje}):")
    resumo_atual = empresa.get_resumo_aliquotas(hoje)
    print(f"  - Consultas: {resumo_atual['consultas']}%")
    print(f"  - Plant√£o: {resumo_atual['plantao']}%")
    print(f"  - Outros: {resumo_atual['outros']}%")
    
    print(f"\n3. Al√≠quotas para o pr√≥ximo m√™s ({proximo_mes}):")
    resumo_futuro = empresa.get_resumo_aliquotas(proximo_mes + timedelta(days=5))
    print(f"  - Consultas: {resumo_futuro['consultas']}%")
    print(f"  - Plant√£o: {resumo_futuro['plantao']}%")
    print(f"  - Outros: {resumo_futuro['outros']}%")
    
    return empresa


def testar_empresa_com_override(conta):
    """Testa empresa que sobrescreve al√≠quotas da conta"""
    print("\nüè¢ TESTANDO EMPRESA COM OVERRIDE DE AL√çQUOTAS")
    print("=" * 50)
    
    # Criar empresa com al√≠quotas espec√≠ficas
    empresa_especial = Empresa.objects.create(
        conta=conta,
        name='Cl√≠nica Especial Ltda',
        nome_fantasia='Cl√≠nica Especial',
        cnpj='33444555000166',
        usa_aliquotas_especificas=True,  # Usa suas pr√≥prias al√≠quotas
        aliquota_iss_consultas=Decimal('1.50'),  # Al√≠quota reduzida por conv√™nio
        aliquota_iss_plantao=Decimal('1.50'),
        aliquota_iss_outros=Decimal('2.00'),
        observacoes_tributarias='Conv√™nio especial com a prefeitura - al√≠quotas reduzidas'
    )
    print(f"Empresa especial criada: {empresa_especial}")
    
    hoje = date.today()
    proximo_mes = (hoje.replace(day=1) + timedelta(days=32)).replace(day=1)
    
    # Testar que sempre usa as al√≠quotas da empresa, independente da data
    print(f"\n1. Al√≠quotas para hoje (deve usar da empresa):")
    resumo_hoje = empresa_especial.get_resumo_aliquotas(hoje)
    print(f"  - Consultas: {resumo_hoje['consultas']}% (empresa: {empresa_especial.aliquota_iss_consultas}%)")
    print(f"  - Usa espec√≠ficas: {resumo_hoje['usa_especificas']}")
    
    print(f"\n2. Al√≠quotas para o futuro (deve usar da empresa):")
    resumo_futuro = empresa_especial.get_resumo_aliquotas(proximo_mes)
    print(f"  - Consultas: {resumo_futuro['consultas']}% (empresa: {empresa_especial.aliquota_iss_consultas}%)")
    print(f"  - Usa espec√≠ficas: {resumo_futuro['usa_especificas']}")
    
    return empresa_especial


def testar_validacao_sobreposicao(conta):
    """Testa valida√ß√£o de sobreposi√ß√£o de vig√™ncias"""
    print("\n‚ùå TESTANDO VALIDA√á√ÉO DE SOBREPOSI√á√ÉO")
    print("=" * 50)
    
    hoje = date.today()
    
    # Tentar criar al√≠quota que sobrep√µe com existente
    print("\n1. Tentando criar al√≠quota que sobrep√µe...")
    try:
        aliquota_sobreposicao = Aliquotas(
            conta=conta,
            ISS_CONSULTAS=Decimal('5.00'),
            ISS_PLANTAO=Decimal('5.00'),
            ISS_OUTROS=Decimal('5.00'),
            ativa=True,
            data_vigencia_inicio=hoje - timedelta(days=5),  # Sobrep√µe com atual
            data_vigencia_fim=hoje + timedelta(days=10),
            observacoes="Tentativa de sobreposi√ß√£o"
        )
        aliquota_sobreposicao.full_clean()
        print("‚ùå Deveria ter falhado na valida√ß√£o de sobreposi√ß√£o")
    except ValidationError as e:
        print(f"‚úÖ Valida√ß√£o de sobreposi√ß√£o funcionando: {e}")


def testar_calculo_impostos_temporal(empresa):
    """Testa c√°lculo de impostos considerando data espec√≠fica"""
    print("\nüí∞ TESTANDO C√ÅLCULO DE IMPOSTOS TEMPORAL")
    print("=" * 50)
    
    valor_nota = Decimal('1000.00')
    hoje = date.today()
    mes_passado = hoje.replace(day=1) - timedelta(days=1)
    mes_passado = mes_passado.replace(day=1)
    
    # Calcular impostos para o m√™s passado
    print(f"\n1. Calculando impostos para nota de {mes_passado}:")
    impostos_passado = empresa.calcular_impostos_nf_na_data(
        valor_nota, 'consultas', mes_passado + timedelta(days=5)
    )
    print(f"  Valor bruto: R$ {impostos_passado['valor_bruto']}")
    print(f"  ISS ({impostos_passado['aliquota_iss_aplicada']}%): R$ {impostos_passado['valor_iss']}")
    print(f"  Valor l√≠quido: R$ {impostos_passado['valor_liquido']}")
    
    # Calcular impostos para hoje
    print(f"\n2. Calculando impostos para nota de hoje:")
    impostos_hoje = empresa.calcular_impostos_nf_na_data(
        valor_nota, 'consultas', hoje
    )
    print(f"  Valor bruto: R$ {impostos_hoje['valor_bruto']}")
    print(f"  ISS ({impostos_hoje['aliquota_iss_aplicada']}%): R$ {impostos_hoje['valor_iss']}")
    print(f"  Valor l√≠quido: R$ {impostos_hoje['valor_liquido']}")
    
    # Comparar diferen√ßa
    diferenca_iss = impostos_hoje['valor_iss'] - impostos_passado['valor_iss']
    print(f"\n3. Impacto da mudan√ßa de al√≠quota:")
    print(f"  Diferen√ßa no ISS: R$ {diferenca_iss}")
    print(f"  Percentual de aumento: {(diferenca_iss / impostos_passado['valor_iss'] * 100):.2f}%")


def main():
    """Fun√ß√£o principal de teste"""
    print("üöÄ INICIANDO TESTES DO SISTEMA TEMPORAL DE AL√çQUOTAS")
    print("=" * 70)
    
    try:
        # Configurar dados de teste
        conta = criar_dados_teste()
        
        # Testar sistema temporal
        aliquotas_passado, aliquotas_atual, aliquotas_futuro = testar_aliquotas_temporais(conta)
        testar_busca_por_data(conta, aliquotas_passado, aliquotas_atual, aliquotas_futuro)
        
        # Testar empresas
        empresa_temporal = testar_empresa_com_sistema_temporal(conta)
        empresa_especial = testar_empresa_com_override(conta)
        
        # Testar valida√ß√µes e c√°lculos
        testar_validacao_sobreposicao(conta)
        testar_calculo_impostos_temporal(empresa_temporal)
        
        print("\n" + "=" * 70)
        print("üéâ TESTES DO SISTEMA TEMPORAL CONCLU√çDOS COM SUCESSO!")
        print("‚úÖ Configura√ß√µes temporais de al√≠quotas funcionando")
        print("‚úÖ Busca por data espec√≠fica funcionando")
        print("‚úÖ Hierarquia de al√≠quotas (empresa > conta temporal > padr√£o) funcionando")
        print("‚úÖ Valida√ß√£o de sobreposi√ß√£o de vig√™ncias funcionando")
        print("‚úÖ C√°lculos com data espec√≠fica funcionando")
        print("‚úÖ Sistema preparado para mudan√ßas mensais por decreto")
        
    except Exception as e:
        print(f"\n‚ùå ERRO DURANTE OS TESTES: {e}")
        import traceback
        traceback.print_exc()


if __name__ == '__main__':
    main()
